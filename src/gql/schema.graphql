type Query {
    getAuthor(username: String, email: String): Author
    getAllAuthors: [Author!]!
    getStory(_id: ID, title: String): Story  # since 'id' is a built-in function in python. '_id' is used.
    getAllStoriesByAuthor(username: String!): [Story!]!
}

type Mutation {
    newAuthor(username: String!, email: String!, password: String!, passwordConfirm: String!): NewAuthorPayload
}

type Author {
    id: ID!
    username: String!
    email: String!
    dateCreated: String!
    profileInfo: AuthorProfile!
    stories: [Story!]!
}

type Story {
    id: ID!
    title: String!
    content: String
    synopsis: String
    language: String!
    isPublished: Boolean!
    authors: [Author!]!
}

type AuthorProfile {
    nameFirst: String
    nameLast: String
    bioDescript: String
    location: String
}

type NewAuthorPayload {
    "The success status of the Author's account creation. Returns `true` if all went well. It returns `false` otherwise."
    status: Boolean!
    "The error ocurred in case something happens when trying to create a new Author."
    error: String
    "The Author's ID. It's returned if and only if the account was successfully created."
    authorID: String
}

type NewStoryPayload {
    status: Boolean!
    error: String
    storyID: String
}