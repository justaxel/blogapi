type Query {
    getArtist(username: String, email: String): Artist
    getAllArtists: [Artist!]!
    getStory(_id: ID): Story  # since 'id' is a built-in function in python. '_id' is used.
    getAllStoriesByArtist(_id: ID!): [Story]
}

type Mutation {
    newArtist(username: String!, email: String!, password: String!, passwordConfirm: String!): NewArtistPayload
}

type Artist {
    id: ID!
    username: String!
    email: String!
    dateCreated: String!
    profileInfo: ArtistProfile
    stories: [Story]
}

type Story {
    id: ID!
    title: String!
    content: String
    synopsis: String
    language: String!
    isPublished: Boolean!
    artists: [Artist!]!
}

type ArtistProfile {
    nameFirst: String
    nameLast: String
    bioDescript: String
    location: String
}

type NewArtistPayload {
    "The success status of the Artist's account creation. Returns `true` if all went well. It returns `false` otherwise."
    status: Boolean!
    "The error ocurred in case something happens when trying to create a new Artist."
    error: String
    "The Artist's ID. It's returned if and only if the account was successfully created."
    authorID: String
}

type NewStoryPayload {
    status: Boolean!
    error: String
    storyID: String
}