type Query {
    getOneAuthor(
        "The username used to retrieve the Author information."
        username: String,
        "The email used to retrieve the Author information."
        email: String): Author
    getAllAuthors: [Author!]!
}

type Mutation {
    newAuthor(username: String!, email: String!, password: String!, passwordConfirm: String!): NewAuthorPayload
}

type Author {

    id: ID!
    username: String!
    email: String!
    accountStatus: String!
    dateCreated: String!
}

type NewAuthorPayload {
    "The success status of the Author's account creation. Returns `true` if all went well. It returns `false` otherwise."
    status: Boolean!
    "The error ocurred in case something happens when trying to create a new Author."
    error: String
    "The Author's ID. It's returned if and only if the account was successfully created."
    authorID: String
}

type NewStoryPayload {
    status: Boolean!
    error: String
    storyID: String
}